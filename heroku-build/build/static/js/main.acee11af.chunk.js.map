{"version":3,"sources":["components/Header.tsx","components/Ride.tsx","components/Dashboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","appbar","padding","spacing","header","fontWeight","Header","classes","AppBar","className","position","color","Typography","align","variant","Ride","children","message","authorName","createdAt","authorPhone","itemCreateDate","Date","createDateForShow","isToday","format","ListItem","ListItemAvatar","Avatar","DirectionsCarSharp","ListItemText","primary","secondary","dashboard","paddingTop","Dashboard","rides","messages","map","key","_id","Container","Paper","List","createMuiTheme","palette","purple","green","typography","fontFamily","join","App","useState","setMessages","getMessages","a","fetch","response","json","myJson","data","console","log","useEffect","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SAKMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,OAAQ,CACJC,QAASF,EAAMG,QAAQ,IAE3BC,OAAQ,CACJC,WAAY,SAeLC,EAXA,WACX,IAAMC,EAAUT,IAChB,OACI,kBAACU,EAAA,EAAD,CAAQC,UAAWF,EAAQN,OAAQS,SAAS,QAAQC,MAAM,WACtD,kBAACC,EAAA,EAAD,CAAYH,UAAWF,EAAQH,OAAQS,MAAM,SAASC,QAAQ,MAA9D,wG,gFCGGC,EAhBF,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,SACJC,EAAgDD,EAAhDC,QAAoBC,GAA4BF,EAAvCG,UAAuCH,EAA5BE,YAAYE,EAAgBJ,EAAhBI,YAClCC,EAAiB,IAAIC,KAAKN,EAASG,WACnCI,EAAoBC,YAAQH,GAAR,mBAAsCI,YAAOJ,EAAgB,UAAaI,YAAOJ,EAAgB,cAC3H,OACI,kBAACK,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,QAGR,kBAACC,EAAA,EAAD,CAAcC,QAASd,EAASe,UAAS,+EAAmBT,EAAnB,iCAA8CL,EAA9C,4CAAmEE,OCXlHtB,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCiC,UAAW,CACPC,WAAYlC,EAAMG,QAAQ,SAmBnBgC,EAhBG,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,MACX7B,EAAUT,IACVuC,EAAWD,EAAME,KAAI,SAACrB,GAAD,OAAwB,kBAAC,EAAD,CAAMsB,IAAKtB,EAAQuB,KAAMvB,MAC5E,OAEI,kBAAEwB,EAAA,EAAF,CAAYhC,UAAWF,EAAQ0B,WAC3B,kBAACS,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACKN,MCXfrC,EAAQ4C,YAAe,CAC3BC,QAAS,CACPd,QAASe,IACTd,UAAWe,KAEbC,WAAY,CACVC,WAAY,CACV,aACA,SACA,mBACA,QACA,aACA,sBACA,mBACA,qBACAC,KAAK,QA4BIC,EAvBO,WAAO,IAAD,EACMC,mBAAS,IADf,mBACnBf,EADmB,KACTgB,EADS,KAEpBC,EAAW,uCAAG,8BAAAC,EAAA,sEACeC,MAAM,qCADrB,cACZC,EADY,gBAEGA,EAASC,OAFZ,OAEZC,EAFY,OAGlBN,EAAYM,EAAOC,MACnBC,QAAQC,IAAIH,EAAOC,MAJD,2CAAH,qDAWjB,OALAG,qBAAU,WAER,OADAT,IACO,eAEN,IAED,yBAAK7C,UAAU,OACb,kBAACuD,EAAA,EAAD,CAAehE,MAAOA,GACpB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWoC,MAAOC,OChCN4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.acee11af.chunk.js","sourcesContent":["import React from 'react'\r\nimport { AppBar, Typography } from '@material-ui/core';\r\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles';\r\nimport { fontWeight } from '@material-ui/system';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    appbar: {\r\n        padding: theme.spacing(2),\r\n    },\r\n    header: {\r\n        fontWeight: 400\r\n\r\n    }\r\n}))\r\nconst Header = () => {\r\n    const classes = useStyles()\r\n    return (\r\n        <AppBar className={classes.appbar} position='fixed' color='primary'>\r\n            <Typography className={classes.header} align='center' variant='h2'>\r\n                לוח טרמפים ירושלים\r\n        </Typography>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport { Avatar, ListItem, ListItemAvatar, ListItemText } from '@material-ui/core';\r\nimport { DirectionsCarSharp } from '@material-ui/icons';\r\nimport { isToday, format } from 'date-fns'\r\nimport { RideProps } from '../types/index'\r\nconst Ride = ({ children }: { children: RideProps }) => {\r\n    const { message, createdAt, authorName, authorPhone } = children\r\n    const itemCreateDate = new Date(children.createdAt)\r\n    const createDateForShow = isToday(itemCreateDate) ? `Today at ${format(itemCreateDate, 'HH:mm')}` : format(itemCreateDate, 'MM/dd/yyyy')\r\n    return (\r\n        <ListItem>\r\n            <ListItemAvatar>\r\n                <Avatar>\r\n                    <DirectionsCarSharp />\r\n                </Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText primary={message} secondary={`הועלה בתאריך: ${createDateForShow}, נהג: ${authorName} טלפון: ${authorPhone}`} />\r\n        </ListItem>\r\n    )\r\n}\r\n\r\nexport default Ride\r\n","import React from 'react'\r\nimport { Container, List, Paper } from '@material-ui/core';\r\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles';\r\nimport Ride from './Ride'\r\nimport { RideProps } from '../types';\r\nconst useStyles = makeStyles(theme => ({\r\n    dashboard: {\r\n        paddingTop: theme.spacing(12),\r\n    },\r\n}))\r\nconst Dashboard = ({ rides }: { rides: Array<RideProps> }) => {\r\n    const classes = useStyles()\r\n    const messages = rides.map((message: RideProps) => <Ride key={message._id}>{message}</Ride>)\r\n    return (\r\n\r\n        < Container className={classes.dashboard} >\r\n            <Paper>\r\n                <List>\r\n                    {messages}\r\n                </List>\r\n            </Paper>\r\n\r\n        </Container >\r\n    )\r\n}\r\n\r\nexport default Dashboard\r\n","import React, { useState, useEffect } from 'react';\nimport { purple, green } from '@material-ui/core/colors';\nimport { createMuiTheme, makeStyles } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport Header from './components/Header';\nimport Dashboard from './components/Dashboard';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: purple,\n    secondary: green,\n  },\n  typography: {\n    fontFamily: [\n      '\"Segoe UI\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(','),\n  },\n});\n\n\nconst App: React.FC = () => {\n  const [messages, setMessages] = useState([])\n  const getMessages = async () => {\n    const response: Response = await fetch('http://localhost:3001/api/getData')\n    const myJson = await response.json();\n    setMessages(myJson.data)\n    console.log(myJson.data)\n  }\n  useEffect(() => {\n    getMessages()\n    return () => {\n    };\n  }, [])\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <Header />\n        <Dashboard rides={messages} />\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}